// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

// ENUM BARU UNTUK STATUS TANTANGAN
enum ChallengeStatus {
  OPEN      // Terbuka untuk proposal
  IN_PROGRESS // Proposal sudah disetujui, sedang dikerjakan
  COMPLETED // Selesai
}

// ENUM BARU UNTUK STATUS PROPOSAL
enum ProposalStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdChallenges Challenge[] @relation("Challenger")
  acceptedChallenges Challenge[] @relation("Solver")
  views ChallengeView[]
  
  // Relasi baru
  proposals Proposal[]
  messages  Message[]
}

model Challenge {
  id           Int      @id @default(autoincrement())
  title        String
  category     String
  description  String
  material     String?
  reward       Int
  deadline     DateTime
  status       ChallengeStatus @default(OPEN) // Menggunakan Enum Status
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  challengerId Int
  challenger   User     @relation("Challenger", fields: [challengerId], references: [id], onDelete: Cascade)

  solverId     Int?
  solver       User?    @relation("Solver", fields: [solverId], references: [id], onDelete: SetNull)

  images       ChallengeImage[]
  views        ChallengeView[]
  
  // Relasi baru
  proposals    Proposal[]
  messages     Message[]
}

// MODEL BARU UNTUK PROPOSAL
model Proposal {
  id          Int      @id @default(autoincrement())
  message     String
  status      ProposalStatus @default(PENDING)
  createdAt   DateTime @default(now())

  challengeId Int
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  authorId    Int
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// MODEL BARU UNTUK CHAT (FONDASI)
model Message {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())

  challengeId Int
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  authorId    Int
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}


model ChallengeImage {
  id          Int      @id @default(autoincrement())
  url         String
  createdAt   DateTime @default(now())
  challengeId Int
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model ChallengeView {
  userId      Int
  challengeId Int
  viewedAt    DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@id([userId, challengeId])
}
