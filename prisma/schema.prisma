// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  DONE
}

enum ProposalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REVISION_REQUESTED
}

enum CommunityRole {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id                 Int              @id @default(autoincrement())
  email              String           @unique
  name               String?
  password           String
  role               Role             @default(USER)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  createdChallenges  Challenge[]      @relation("Challenger")
  acceptedChallenges Challenge[]      @relation("Solver")
  views              ChallengeView[]
  proposals          Proposal[]
  submissions        Submission[]
  publicComments     PublicComment[]
  forumPosts         ForumPost[]
  sentMessages       PrivateMessage[] @relation("SentMessages")
  receivedMessages   PrivateMessage[] @relation("ReceivedMessages")
  galleryItems       GalleryItem[]
  communitiesOwned   Community[]      @relation("OwnedCommunities")
  communityMemberships CommunityMember[]
}

model GalleryItem {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  category    String
  fileUrl     String
  createdAt   DateTime @default(now())
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Challenge {
  id           Int              @id @default(autoincrement())
  title        String
  description  String
  category     String
  material     String?          // <-- PERBAIKAN: Field ini ditambahkan kembali
  reward       Int
  deadline     DateTime
  status       ChallengeStatus  @default(OPEN)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  challengerId Int
  challenger   User             @relation("Challenger", fields: [challengerId], references: [id], onDelete: Cascade)
  solverId     Int?
  solver       User?            @relation("Solver", fields: [solverId], references: [id], onDelete: SetNull)
  proposals    Proposal[]
  submissions  Submission[]
  publicComments PublicComment[]
  images       ChallengeImage[]
  views        ChallengeView[]
  privateMessages PrivateMessage[]
}

model PublicComment {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId Int
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model PrivateMessage {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime @default(now())
  senderId  Int
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  challengeId Int
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  fileUrl    String?
  fileType   String?
}

model Proposal {
  id          Int             @id @default(autoincrement())
  message     String
  fileUrl     String?
  status      ProposalStatus  @default(PENDING)
  createdAt   DateTime        @default(now())
  authorId    Int
  author      User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  challengeId Int
  challenge   Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model Submission {
  id          Int               @id @default(autoincrement())
  fileUrl     String
  notes       String?
  status      SubmissionStatus  @default(PENDING)
  createdAt   DateTime          @default(now())
  authorId    Int
  author      User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  challengeId Int
  challenge   Challenge         @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model ChallengeImage {
  id          Int      @id @default(autoincrement())
  url         String
  createdAt   DateTime @default(now())
  challengeId Int
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model ForumPost {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  fileUrl   String?
  fileType  String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  communityId Int?
  community   Community? @relation(fields: [communityId], references: [id], onDelete: SetNull)
}

model ChallengeView {
  userId      Int
  challengeId Int
  viewedAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  @@id([userId, challengeId])
}

model Community {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  ownerId     Int
  owner       User       @relation("OwnedCommunities", fields: [ownerId], references: [id])
  posts       ForumPost[]
  avatarUrl   String?
  members     CommunityMember[]
}

model CommunityMember {
  communityId Int
  userId      Int
  role        CommunityRole @default(MEMBER)
  joinedAt    DateTime @default(now())

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([communityId, userId])
}
